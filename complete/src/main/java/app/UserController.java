package app;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Date;

@Controller
@RequestMapping(path="/crud/")
public class UserController {

	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	static final Logger logger = LogManager.getLogger(UserController.class.getName());

	@RequestMapping("/users/create")
	@ResponseBody
	public String createUser(@RequestBody User user){
		User newUser = null;
		try{
//			newUser= new User(user.getName(),user.getEmail(),user.getContactNumber(),user.getLatitude(),user.getLongitude(),user.getExpectedTime(),user.getRadius(),user.);
			user.setLatestUpdated(new Date());
			userRepository.save(user);
		}
		catch(Exception e){
			logger.error(e.getMessage());
			return e.getMessage();
		}




		System.out.println("Haha:"+user.getLatestUpdated());
		System.out.println("hihi:"+user.toString());

	return String.valueOf(user.getLatestUpdated());
	}

	// GetUserInfo
	@RequestMapping(value = "/user/read/{id}", method = RequestMethod.GET)
	@ResponseBody
	public User getUser(@PathVariable Long id){
		User possibleUser=null;
		System.out.println(userRepository.count()+"\n\n\n");

		try{
			System.out.println("\n\n\n\n\n\n Found one");
			possibleUser = userRepository.findOne(id);
		}
		catch(Exception e){
			logger.error(e.getMessage());
		}

		if(possibleUser==null){
			String errorMessage = "No user found by particular id"+id;
			logger.error(errorMessage);
			return null;
		}

		return possibleUser;
	}


	// Update user location values
	@RequestMapping(value = "/user/update/location/{id}",method = RequestMethod.POST)
	@ResponseBody
	public String updateLocation(long id, Double newLatitude, Double newLongitude){

		User currentUser=null;

		try{
			currentUser = userRepository.findOne(id);
			currentUser.setLatitude(newLatitude);
			currentUser.setLongitude(newLongitude);
		}
		catch(Exception e){
			logger.error(e.getMessage());
			return e.getMessage();
		}

		return "Updated Location of :"+currentUser.getName();
	}


	//Delete User
	@RequestMapping("/user/delete/{id}")
	@ResponseBody
	public String deleteUser(long id){

		try{
			userRepository.delete(id);
		}
		catch(Exception e){
			logger.error(e.getMessage());
			return e.getMessage();
			}
		return "User Deleted";
	}

	@RequestMapping(value="/user/add", method = RequestMethod.POST) // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email, @RequestParam String contactNumber,
											@RequestParam Double latitude,
											@RequestParam Double longitude
											,@RequestParam  Integer radius) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		n.setContactNumber(contactNumber);
		n.setLatitude(latitude);
		n.setLongitude(longitude);
		n.setRadius(radius);

		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users

		System.out.println(" \n\n\n\n\n\n\n\n\n\n\n\n\n  Printing All ");

		return userRepository.findAll();
	}
}
